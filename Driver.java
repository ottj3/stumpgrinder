package edu.tcnj.stumpgrinder;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.HashSet;

/*******************************************************************************
 * This class handles I/O, creates the n-species tree, performs the mixed tree
 * enumeration/edge contraction algorithms, and determines the most compact
 * parsimonious trees generated by both methods.
 * 
 * @author Angela Huang <huanga9@tcnj.edu>
 * @date (Spring 2016)
 * @version 1.0
 * 
 ********************************************************************************/

public class Driver {

	static ArrayList<String> labels = new ArrayList<String>();
	static ArrayList<String> data = new ArrayList<String>();
	static SetList<Character> worldSet = new SetList<Character>();
	static ArrayList<Node<List<SetList<Character>>>> species = new ArrayList<Node<List<SetList<Character>>>>();

	public static void main(String[] args) throws IOException {
		getInput();
		makeNodes();
		enumerateMixedTrees();
		enumerateCubicTrees();
	}

	/********************************************************************************
	 * Reads in a list of species through the console.
	 * 
	 * Input format:"Label:Data" See study1100.txt for sample input. 
	 * Assertion:Label.size() = 1
	 * 
	 * @throws IOException
	 ********************************************************************************/

	public static void getInput() throws IOException {
		System.out.println("Input a list of species:");
		BufferedReader stdin = new BufferedReader(new InputStreamReader(
				System.in));

		String line;

		/* Processes the data. */
		do {
			line = stdin.readLine();
			if (line != null && line.length() > 0) {
				labels.add(line.split(":", 2)[0]);
				data.add(line.split(":", 2)[1]);
			}
		} while (line != null && line.length() > 0);
	}

	/*********************************************************************************
	 * Create a node object for each input species.
	 ********************************************************************************/
	public static void makeNodes() {
		for (int index = 0; index < data.get(0).length(); index++) {
			worldSet.add(new HashSet<Character>());
		}

		for (int index = 0; index < labels.size(); index++) {
			List<SetList<Character>> sets = new ArrayList<SetList<Character>>();
			sets.add(new SetList<Character>(data.get(0).length()));

			for (int index_ = 0; index_ < data.get(index).length(); index_++) {
				sets.get(0).set(index_, data.get(index).charAt(index_));
				worldSet.get(index_).add(data.get(index).charAt(index_));
			}

			Node<List<SetList<Character>>> node = new Node<List<SetList<Character>>>(
					labels.get(index), sets);
			species.add(node);
		}
	}

	/*********************************************************************************
	 * Enumerates all mixed trees and calculates their parsimony scores. Invokes
	 * findMixedTrees() method to find the most parsimonious mixed trees.
	 * 
	 * @throws FileNotFoundException
	 ********************************************************************************/
	public static void enumerateMixedTrees() throws FileNotFoundException {

		PrintWriter outputfile = new PrintWriter("outputMixed.txt");

		Tree<List<SetList<Character>>> tree = new Tree<List<SetList<Character>>>(
				species);

		HashMap<String, Integer> mixedScores = new HashMap<String, Integer>();

		System.out.println("\nEnumerating mixed trees...");

		for (String treeString : MixedTreeEnumeration.enumerate(tree)) {
			Tree multifurcating = new Tree(tree.fromString(treeString)
					.getChildren(), tree.fromString(treeString));

			// Get the parsimony score of every mixed labelled tree
			int score = FastHartigan.bottomUp(multifurcating, worldSet);

			mixedScores.put(treeString, score);

			System.out.println(multifurcating + " Score:" + score);
			outputfile.println(multifurcating + " Score:" + score);
		}

		outputfile.close();
		findMixedTrees(mixedScores);

	}

	/*********************************************************************************
	 * Gets the most parsimonious compact mixed trees.
	 * 
	 * @param mixedScores
	 * @throws FileNotFoundException
	 ********************************************************************************/
	public static void findMixedTrees(HashMap<String, Integer> mixedScores)
			throws FileNotFoundException {
		int MPscore = 1000;
		for (Integer value : mixedScores.values()) {
			if (value < MPscore) {
				MPscore = value;
			}
		}
		System.out.println("\nMP-Mixed Trees:");
		System.out.println("MP Score:" + MPscore);
		for (String tree : mixedScores.keySet()) {
			if (mixedScores.get(tree) == MPscore) {
				System.out.println(tree);
			}
		}
	}

	/*********************************************************************************
	 * Enumerates all cubic trees and calculates their parsimony scores.
	 * 
	 * Invokes the compactCubicTrees method to compact the MP-cubic trees.
	 * 
	 * @throws FileNotFoundException
	 ********************************************************************************/
	public static void enumerateCubicTrees() throws FileNotFoundException {

		PrintWriter outputfile = new PrintWriter("outputCubic.txt");

		Tree<List<SetList<Character>>> tree = new Tree<List<SetList<Character>>>(
				species);

		/* Enumerate Cubic Trees */
		HashSet<String> cubicTrees = TreeEnumeration.enumerate(tree);

		HashMap<String, Integer> cubicScores = new HashMap<String, Integer>();
		ArrayList<String> bestTrees = new ArrayList<String>();

		System.out.println("\nEnumerating cubic trees...");

		for (String treeString : cubicTrees) {
			Tree cubic = new Tree(tree.fromString(treeString).getChildren(),
					tree.fromString(treeString));

			/* Tree is rooted here. */
			Node<List<SetList<Character>>> root = new Node<List<SetList<Character>>>();
			root.makeChild(cubic.getRoot());
			root.makeChild(cubic.getRoot().getChild(0));
			cubic.setRoot(root);

			/* Score trees with Fitch's algorithm. */
			int score = Fitch.bottomUp(cubic);

			cubicScores.put(cubic.toString(), score);

			System.out.println(cubic + " Score:" + score);
			outputfile.println(cubic + " Score:" + score);
		}

		int MPscore = 1000;
		for (Integer value : cubicScores.values()) {
			if (value < MPscore) {
				MPscore = value;
			}
		}

		System.out.println("\nMP-Cubic Trees:");
		System.out.println("MP Score:" + MPscore);
		for (String cubic : cubicScores.keySet()) {
			if (cubicScores.get(cubic) == MPscore) {
				System.out.println(cubic);
				bestTrees.add(cubic);
			}
		}

		compactCubicTrees(bestTrees);
	}

	/*********************************************************************************
	 * Performs the edge contraction algorithm on the MP-cubic trees.
	 * 
	 * @param trees
	 *            An list of MP-cubic trees in Newick string format.
	 ********************************************************************************/
	public static void compactCubicTrees(ArrayList<String> trees) {

		Tree<List<SetList<Character>>> tree = new Tree<List<SetList<Character>>>(
				species);

		TreeEnumeration.enumerate(tree);
		int length = species.get(0).getData().get(0).size();

		for (int i = 0; i < trees.size(); i++) {

			System.out
			.println("\nCompacting MP-cubic tree #" + (i + 1) + "...");
			Tree testTree = new Tree(tree.fromString(trees.get(i))
					.getChildren(), tree.fromString(trees.get(i)));

			EdgeContraction.edgeContraction(testTree, worldSet, length);

		}
	}
}
