#!/usr/bin/python

import sys
from math import factorial

# Python script that calculates the number of possible binary trees for n nodes.
# By: Andrew Miller

# Usage: python binTreeNum.py n d 
# Where n is a positive integer and d is either the letter r for rooted trees or u for unrooted trees 

# Error Handling
# ==============

# Check how many arguements there are
if len(sys.argv) > 3:
	print("Too many arguements")
	print("Arguements should be a positive integer and a designator in that order")
	quit()

if len(sys.argv) < 3:
	print("Not enough arguements")
	print("Arguements should be a positive integer and a designator in that order")
	quit()

# Check if the designator is valid
if sys.argv[2] != 'u' and sys.argv[2] != 'r':
	print("Invalid designator")
	print("Designator should be 'r' for rooted trees or 'u' for unrooted trees")
	quit() 

# Check if the integer is within bounds
if int(sys.argv[1]) < 0:
	print("Invalid integer")
	print("You cannot have a negative number of nodes")
	quit()

if sys.argv[2] == 'r' and int(sys.argv[1]) < 2:
	print("Invalid integer")
	print("You cannot have a rooted tree with less than two nodes")
	quit()

if sys.argv[2] == 'u' and int(sys.argv[1]) < 3:
	print("Invalid integer")
	print("You cannot have an unrooted tree with less than three nodes")
	quit()

# Calculation
# ===========

def unrootedTreeProduct(n):
	if n == 3:
		return 1
	else:
		return (2 * n - 5) * unrootedTreeProduct(n-1)

def rootedTreeProduct(n):
	if n == 2:
		return 1
	else:
		return (2 * n - 3) * rootedTreeProduct(n-1)

if sys.argv[2] == 'r':
	binTrees = rootedTreeProduct(int(sys.argv[1]))
	print(binTrees)

if sys.argv[2] == 'u':
	binTrees = unrootedTreeProduct(int(sys.argv[1]))
	print(binTrees)
